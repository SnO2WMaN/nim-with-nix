{
  # main
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    nimnix.url = "github:sno2wman/nim.nix";

    # nimble2nix.url = "github:bandithedoge/nimble2nix";
  };

  # dev
  inputs = {
    devshell.url = "github:numtide/devshell";
    flake-utils.url = "github:numtide/flake-utils";
    flake-compat = {
      url = "github:edolstra/flake-compat";
      flake = false;
    };
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    ...
  } @ inputs:
    flake-utils.lib.eachSystem ["x86_64-linux"] (
      system: let
        pkgs = import nixpkgs {
          inherit system;
          overlays = with inputs; [
            devshell.overlay
            nimnix.overlays.default
          ];
        };
      in {
        /*
        packages.default = pkgs.nimPackages.buildNimPackage {
          # Name and version of your package
          pname = "example_package";
          version = "0.1.0";

          # Where your package is located
          # Must contain `nimble2nix.json` generated by running `nimble2nix`
          src = ./.;

          # Uncomment the following line if your `nimble2nix.json` has a different name:
          # deps = ./my-custom-deps.json;
        };
        */
        packages.default = (pkgs.callPackage ./nix {}) {
          pname = "nimnix";
          version = "0.1.0";
          src = ./.;

          nimbleFile = ./nimnix.nimble;
          nimbleLockFile = ./nimble.lock;
        };
        apps.default = flake-utils.lib.mkApp {
          drv = self.packages.${system}.default;
        };

        devShells.default = pkgs.devshell.mkShell {
          packages = (
            with pkgs; [
              alejandra
              treefmt
              nim-unwrapped
              nimble
            ]
          );
        };
      }
    );
}
